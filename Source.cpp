#include<iostream>
#include<map>
#include<set>
#include<ctime>
using namespace std;
//Функция для вывода последовательности на экран
void show_map(map<int,int>map)
{
	for (auto it = map.begin(); it != map.end(); it++)
	{
		cout << "(" << it->first << "," << it->second << ")" << '\t';
	}
	cout << endl;
}
int main()
{
	unsigned int start_time = clock(); // начальное время
	// Входные параметры
	int n = 3;
	map<int, int> mymap = {{1,10},{2,11},{3,11},{4,11},{5,11},{6,10},{7,11},{8,11},{9,11},{10,11},{11,11},{12,11},{13,11},{14,10}};
	// Вывод на экран исходной последовательности
	show_map(mymap);
	//Значения минимального и максимального ключа ассоциативного массива для цикла
	int i_min = mymap.begin()->first;
	auto temp = mymap.end();
	temp--;
	int i_max = temp->first;
	//Создание контейнера для множества ключей
	set<int>set_of_mymap;
	//Цикл, перебирающий ключи 
	for (int i = i_min+1 ; i <= i_max; i++)
	{
		//Проверка условия равенства значений двух соседних ключей
		if (mymap[i - 1] == mymap[i])
		{
			// При равентве значений двух соседних ключей-> Присваивам контейнеру ключей ключи одинакового значения
			//Таким образом накапливаем подпоследовательность
			set_of_mymap.insert(i - 1);
			set_of_mymap.insert(i);
		}
		//Проверяем контейнер ключей на пустоту, чтобы исключить случай, при котором каждое значение уникально и подпоследовательностей не существует.
		else if (set_of_mymap.size()!=0)
		{
			//Значения максимального и минимального ключа для цикла 
			int j_min = *set_of_mymap.begin() ;
			auto temp = set_of_mymap.end();
			temp--;
			int j_max = *temp;
			//Цикл для подпоследовательности
			for (int j = j_min; j <= j_max; j++)
			{
				//Условия при которых мы должны удалить ключ подпоследовательности 
				if ((j != j_min) && (j != j_max)&& ((j - j_min+1)%n!=0))
				{
					//Удаление элемента из последовательности с искомым ключом 
					mymap.erase(j);
				}
			}
			// Очищение массива для работы с новой подпоследовательностью
			set_of_mymap.clear();
		}
	}
// Вывод на экран полученной последовательности
	show_map(mymap);
	system("pause");
	return 0;
}